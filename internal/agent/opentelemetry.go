// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package agent

//go:generate gowrap gen -p github.com/tofutf/tofutf/internal/agent -i Service -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o opentelemetry.go -l ""

import (
	"context"

	"github.com/tofutf/tofutf/internal/pubsub"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ServiceWithTracing implements Service interface instrumented with opentracing spans
type ServiceWithTracing struct {
	Service
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewServiceWithTracing returns ServiceWithTracing
func NewServiceWithTracing(base Service, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ServiceWithTracing {
	d := ServiceWithTracing{
		Service:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// CreateAgentPool implements Service
func (_d ServiceWithTracing) CreateAgentPool(ctx context.Context, opts CreateAgentPoolOptions) (pp1 *Pool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CreateAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"opts": opts}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CreateAgentPool(ctx, opts)
}

// CreateAgentToken implements Service
func (_d ServiceWithTracing) CreateAgentToken(ctx context.Context, poolID string, opts CreateAgentTokenOptions) (ap1 *agentToken, ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.CreateAgentToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"poolID": poolID,
				"opts":   opts}, map[string]interface{}{
				"ap1": ap1,
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.CreateAgentToken(ctx, poolID, opts)
}

// DeleteAgentToken implements Service
func (_d ServiceWithTracing) DeleteAgentToken(ctx context.Context, tokenID string) (ap1 *agentToken, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.DeleteAgentToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.DeleteAgentToken(ctx, tokenID)
}

// GetAgentPool implements Service
func (_d ServiceWithTracing) GetAgentPool(ctx context.Context, poolID string) (pp1 *Pool, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.GetAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"poolID": poolID}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.GetAgentPool(ctx, poolID)
}

// GetAgentToken implements Service
func (_d ServiceWithTracing) GetAgentToken(ctx context.Context, tokenID string) (ap1 *agentToken, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.GetAgentToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.GetAgentToken(ctx, tokenID)
}

// ListAgentTokens implements Service
func (_d ServiceWithTracing) ListAgentTokens(ctx context.Context, poolID string) (apa1 []*agentToken, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.ListAgentTokens")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"poolID": poolID}, map[string]interface{}{
				"apa1": apa1,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.ListAgentTokens(ctx, poolID)
}

// WatchAgentPools implements Service
func (_d ServiceWithTracing) WatchAgentPools(ctx context.Context) (ch1 <-chan pubsub.Event[*Pool], f1 func()) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.WatchAgentPools")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ch1": ch1,
				"f1":  f1})
		}
		_span.End()
	}()
	return _d.Service.WatchAgentPools(ctx)
}

// WatchAgents implements Service
func (_d ServiceWithTracing) WatchAgents(ctx context.Context) (ch1 <-chan pubsub.Event[*Agent], f1 func()) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.WatchAgents")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ch1": ch1,
				"f1":  f1})
		}
		_span.End()
	}()
	return _d.Service.WatchAgents(ctx)
}

// WatchJobs implements Service
func (_d ServiceWithTracing) WatchJobs(ctx context.Context) (ch1 <-chan pubsub.Event[*Job], f1 func()) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.WatchJobs")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ch1": ch1,
				"f1":  f1})
		}
		_span.End()
	}()
	return _d.Service.WatchJobs(ctx)
}
