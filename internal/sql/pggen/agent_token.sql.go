// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)

const insertAgentTokenSQL = `INSERT INTO agent_tokens (
    agent_token_id,
    created_at,
    description,
    agent_pool_id
) VALUES (
    $1,
    $2,
    $3,
    $4
);`

type InsertAgentTokenParams struct {
	AgentTokenID pgtype.Text        `json:"agent_token_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Description  pgtype.Text        `json:"description"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
}

// InsertAgentToken implements Querier.InsertAgentToken.
func (q *DBQuerier) InsertAgentToken(ctx context.Context, params InsertAgentTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentToken")
	cmdTag, err := q.conn.Exec(ctx, insertAgentTokenSQL, params.AgentTokenID, params.CreatedAt, params.Description, params.AgentPoolID)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertAgentToken: %w", err)
	}
	return cmdTag, err
}

const findAgentTokenByIDSQL = `SELECT *
FROM agent_tokens
WHERE agent_token_id = $1
;`

type FindAgentTokenByIDRow struct {
	AgentTokenID pgtype.Text        `json:"agent_token_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Description  pgtype.Text        `json:"description"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
}

// FindAgentTokenByID implements Querier.FindAgentTokenByID.
func (q *DBQuerier) FindAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (FindAgentTokenByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentTokenByID")
	rows, err := q.conn.Query(ctx, findAgentTokenByIDSQL, agentTokenID)
	if err != nil {
		return FindAgentTokenByIDRow{}, fmt.Errorf("query FindAgentTokenByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindAgentTokenByIDRow, error) {
		var item FindAgentTokenByIDRow
		if err := row.Scan(&item.AgentTokenID, // 'agent_token_id', 'AgentTokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,   // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.Description, // 'description', 'Description', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.AgentPoolID, // 'agent_pool_id', 'AgentPoolID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findAgentTokensByAgentPoolIDSQL = `SELECT *
FROM agent_tokens
WHERE agent_pool_id = $1
ORDER BY created_at DESC
;`

type FindAgentTokensByAgentPoolIDRow struct {
	AgentTokenID pgtype.Text        `json:"agent_token_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Description  pgtype.Text        `json:"description"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
}

// FindAgentTokensByAgentPoolID implements Querier.FindAgentTokensByAgentPoolID.
func (q *DBQuerier) FindAgentTokensByAgentPoolID(ctx context.Context, agentPoolID pgtype.Text) ([]FindAgentTokensByAgentPoolIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentTokensByAgentPoolID")
	rows, err := q.conn.Query(ctx, findAgentTokensByAgentPoolIDSQL, agentPoolID)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentTokensByAgentPoolID: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindAgentTokensByAgentPoolIDRow, error) {
		var item FindAgentTokensByAgentPoolIDRow
		if err := row.Scan(&item.AgentTokenID, // 'agent_token_id', 'AgentTokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,   // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.Description, // 'description', 'Description', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.AgentPoolID, // 'agent_pool_id', 'AgentPoolID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteAgentTokenByIDSQL = `DELETE
FROM agent_tokens
WHERE agent_token_id = $1
RETURNING agent_token_id
;`

// DeleteAgentTokenByID implements Querier.DeleteAgentTokenByID.
func (q *DBQuerier) DeleteAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentTokenByID")
	rows, err := q.conn.Query(ctx, deleteAgentTokenByIDSQL, agentTokenID)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query DeleteAgentTokenByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
