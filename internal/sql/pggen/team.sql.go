// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

const insertTeamSQL = `INSERT INTO teams (
    team_id,
    name,
    created_at,
    organization_name,
    visibility,
    sso_team_id,
    permission_manage_workspaces,
    permission_manage_vcs,
    permission_manage_modules,
    permission_manage_providers,
    permission_manage_policies,
    permission_manage_policy_overrides
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
);`

type InsertTeamParams struct {
	ID                              pgtype.Text        `json:"id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	Visibility                      pgtype.Text        `json:"visibility"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
}

// InsertTeam implements Querier.InsertTeam.
func (q *DBQuerier) InsertTeam(ctx context.Context, params InsertTeamParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertTeam")
	cmdTag, err := q.conn.Exec(ctx, insertTeamSQL, params.ID, params.Name, params.CreatedAt, params.OrganizationName, params.Visibility, params.SSOTeamID, params.PermissionManageWorkspaces, params.PermissionManageVCS, params.PermissionManageModules, params.PermissionManageProviders, params.PermissionManagePolicies, params.PermissionManagePolicyOverrides)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertTeam: %w", err)
	}
	return cmdTag, err
}

const findTeamsByOrgSQL = `SELECT *
FROM teams
WHERE organization_name = $1
;`

type FindTeamsByOrgRow struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// FindTeamsByOrg implements Querier.FindTeamsByOrg.
func (q *DBQuerier) FindTeamsByOrg(ctx context.Context, organizationName pgtype.Text) ([]FindTeamsByOrgRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamsByOrg")
	rows, err := q.conn.Query(ctx, findTeamsByOrgSQL, organizationName)
	if err != nil {
		return nil, fmt.Errorf("query FindTeamsByOrg: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindTeamsByOrgRow, error) {
		var item FindTeamsByOrgRow
		if err := row.Scan(&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Name,                            // 'name', 'Name', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,                       // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.PermissionManageWorkspaces,      // 'permission_manage_workspaces', 'PermissionManageWorkspaces', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageVCS,             // 'permission_manage_vcs', 'PermissionManageVCS', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageModules,         // 'permission_manage_modules', 'PermissionManageModules', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.OrganizationName,                // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.SSOTeamID,                       // 'sso_team_id', 'SSOTeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Visibility,                      // 'visibility', 'Visibility', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.PermissionManagePolicies,        // 'permission_manage_policies', 'PermissionManagePolicies', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManagePolicyOverrides, // 'permission_manage_policy_overrides', 'PermissionManagePolicyOverrides', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageProviders,       // 'permission_manage_providers', 'PermissionManageProviders', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findTeamByNameSQL = `SELECT *
FROM teams
WHERE name              = $1
AND   organization_name = $2
;`

type FindTeamByNameRow struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// FindTeamByName implements Querier.FindTeamByName.
func (q *DBQuerier) FindTeamByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindTeamByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamByName")
	rows, err := q.conn.Query(ctx, findTeamByNameSQL, name, organizationName)
	if err != nil {
		return FindTeamByNameRow{}, fmt.Errorf("query FindTeamByName: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindTeamByNameRow, error) {
		var item FindTeamByNameRow
		if err := row.Scan(&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Name,                            // 'name', 'Name', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,                       // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.PermissionManageWorkspaces,      // 'permission_manage_workspaces', 'PermissionManageWorkspaces', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageVCS,             // 'permission_manage_vcs', 'PermissionManageVCS', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageModules,         // 'permission_manage_modules', 'PermissionManageModules', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.OrganizationName,                // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.SSOTeamID,                       // 'sso_team_id', 'SSOTeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Visibility,                      // 'visibility', 'Visibility', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.PermissionManagePolicies,        // 'permission_manage_policies', 'PermissionManagePolicies', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManagePolicyOverrides, // 'permission_manage_policy_overrides', 'PermissionManagePolicyOverrides', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageProviders,       // 'permission_manage_providers', 'PermissionManageProviders', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findTeamByIDSQL = `SELECT *
FROM teams
WHERE team_id = $1
;`

type FindTeamByIDRow struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// FindTeamByID implements Querier.FindTeamByID.
func (q *DBQuerier) FindTeamByID(ctx context.Context, teamID pgtype.Text) (FindTeamByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamByID")
	rows, err := q.conn.Query(ctx, findTeamByIDSQL, teamID)
	if err != nil {
		return FindTeamByIDRow{}, fmt.Errorf("query FindTeamByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindTeamByIDRow, error) {
		var item FindTeamByIDRow
		if err := row.Scan(&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Name,                            // 'name', 'Name', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,                       // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.PermissionManageWorkspaces,      // 'permission_manage_workspaces', 'PermissionManageWorkspaces', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageVCS,             // 'permission_manage_vcs', 'PermissionManageVCS', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageModules,         // 'permission_manage_modules', 'PermissionManageModules', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.OrganizationName,                // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.SSOTeamID,                       // 'sso_team_id', 'SSOTeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Visibility,                      // 'visibility', 'Visibility', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.PermissionManagePolicies,        // 'permission_manage_policies', 'PermissionManagePolicies', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManagePolicyOverrides, // 'permission_manage_policy_overrides', 'PermissionManagePolicyOverrides', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageProviders,       // 'permission_manage_providers', 'PermissionManageProviders', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findTeamByTokenIDSQL = `SELECT t.*
FROM teams t
JOIN team_tokens tt USING (team_id)
WHERE tt.team_token_id = $1
;`

type FindTeamByTokenIDRow struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// FindTeamByTokenID implements Querier.FindTeamByTokenID.
func (q *DBQuerier) FindTeamByTokenID(ctx context.Context, tokenID pgtype.Text) (FindTeamByTokenIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamByTokenID")
	rows, err := q.conn.Query(ctx, findTeamByTokenIDSQL, tokenID)
	if err != nil {
		return FindTeamByTokenIDRow{}, fmt.Errorf("query FindTeamByTokenID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindTeamByTokenIDRow, error) {
		var item FindTeamByTokenIDRow
		if err := row.Scan(&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Name,                            // 'name', 'Name', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,                       // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.PermissionManageWorkspaces,      // 'permission_manage_workspaces', 'PermissionManageWorkspaces', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageVCS,             // 'permission_manage_vcs', 'PermissionManageVCS', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageModules,         // 'permission_manage_modules', 'PermissionManageModules', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.OrganizationName,                // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.SSOTeamID,                       // 'sso_team_id', 'SSOTeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Visibility,                      // 'visibility', 'Visibility', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.PermissionManagePolicies,        // 'permission_manage_policies', 'PermissionManagePolicies', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManagePolicyOverrides, // 'permission_manage_policy_overrides', 'PermissionManagePolicyOverrides', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageProviders,       // 'permission_manage_providers', 'PermissionManageProviders', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findTeamByIDForUpdateSQL = `SELECT *
FROM teams t
WHERE team_id = $1
FOR UPDATE OF t
;`

type FindTeamByIDForUpdateRow struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// FindTeamByIDForUpdate implements Querier.FindTeamByIDForUpdate.
func (q *DBQuerier) FindTeamByIDForUpdate(ctx context.Context, teamID pgtype.Text) (FindTeamByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamByIDForUpdate")
	rows, err := q.conn.Query(ctx, findTeamByIDForUpdateSQL, teamID)
	if err != nil {
		return FindTeamByIDForUpdateRow{}, fmt.Errorf("query FindTeamByIDForUpdate: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindTeamByIDForUpdateRow, error) {
		var item FindTeamByIDForUpdateRow
		if err := row.Scan(&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Name,                            // 'name', 'Name', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,                       // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.PermissionManageWorkspaces,      // 'permission_manage_workspaces', 'PermissionManageWorkspaces', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageVCS,             // 'permission_manage_vcs', 'PermissionManageVCS', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageModules,         // 'permission_manage_modules', 'PermissionManageModules', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.OrganizationName,                // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.SSOTeamID,                       // 'sso_team_id', 'SSOTeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Visibility,                      // 'visibility', 'Visibility', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.PermissionManagePolicies,        // 'permission_manage_policies', 'PermissionManagePolicies', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManagePolicyOverrides, // 'permission_manage_policy_overrides', 'PermissionManagePolicyOverrides', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.PermissionManageProviders,       // 'permission_manage_providers', 'PermissionManageProviders', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const updateTeamByIDSQL = `UPDATE teams
SET
    name = $1,
    visibility = $2,
    sso_team_id = $3,
    permission_manage_workspaces = $4,
    permission_manage_vcs = $5,
    permission_manage_modules = $6,
    permission_manage_providers = $7,
    permission_manage_policies = $8,
    permission_manage_policy_overrides = $9
WHERE team_id = $10
RETURNING team_id;`

type UpdateTeamByIDParams struct {
	Name                            pgtype.Text `json:"name"`
	Visibility                      pgtype.Text `json:"visibility"`
	SSOTeamID                       pgtype.Text `json:"sso_team_id"`
	PermissionManageWorkspaces      pgtype.Bool `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool `json:"permission_manage_modules"`
	PermissionManageProviders       pgtype.Bool `json:"permission_manage_providers"`
	PermissionManagePolicies        pgtype.Bool `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool `json:"permission_manage_policy_overrides"`
	TeamID                          pgtype.Text `json:"team_id"`
}

// UpdateTeamByID implements Querier.UpdateTeamByID.
func (q *DBQuerier) UpdateTeamByID(ctx context.Context, params UpdateTeamByIDParams) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateTeamByID")
	rows, err := q.conn.Query(ctx, updateTeamByIDSQL, params.Name, params.Visibility, params.SSOTeamID, params.PermissionManageWorkspaces, params.PermissionManageVCS, params.PermissionManageModules, params.PermissionManageProviders, params.PermissionManagePolicies, params.PermissionManagePolicyOverrides, params.TeamID)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query UpdateTeamByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteTeamByIDSQL = `DELETE
FROM teams
WHERE team_id = $1
RETURNING team_id
;`

// DeleteTeamByID implements Querier.DeleteTeamByID.
func (q *DBQuerier) DeleteTeamByID(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTeamByID")
	rows, err := q.conn.Query(ctx, deleteTeamByIDSQL, teamID)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query DeleteTeamByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
