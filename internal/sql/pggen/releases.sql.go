// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)

const insertLatestTerraformVersionSQL = `INSERT INTO latest_terraform_version (
    version,
    checkpoint
) VALUES (
    $1,
    current_timestamp
);`

// InsertLatestTerraformVersion implements Querier.InsertLatestTerraformVersion.
func (q *DBQuerier) InsertLatestTerraformVersion(ctx context.Context, version pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertLatestTerraformVersion")
	cmdTag, err := q.conn.Exec(ctx, insertLatestTerraformVersionSQL, version)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertLatestTerraformVersion: %w", err)
	}
	return cmdTag, err
}

const updateLatestTerraformVersionSQL = `UPDATE latest_terraform_version
SET version = $1,
    checkpoint = current_timestamp;`

// UpdateLatestTerraformVersion implements Querier.UpdateLatestTerraformVersion.
func (q *DBQuerier) UpdateLatestTerraformVersion(ctx context.Context, version pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateLatestTerraformVersion")
	cmdTag, err := q.conn.Exec(ctx, updateLatestTerraformVersionSQL, version)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query UpdateLatestTerraformVersion: %w", err)
	}
	return cmdTag, err
}

const findLatestTerraformVersionSQL = `SELECT *
FROM latest_terraform_version;`

type FindLatestTerraformVersionRow struct {
	Version    pgtype.Text        `json:"version"`
	Checkpoint pgtype.Timestamptz `json:"checkpoint"`
}

// FindLatestTerraformVersion implements Querier.FindLatestTerraformVersion.
func (q *DBQuerier) FindLatestTerraformVersion(ctx context.Context) ([]FindLatestTerraformVersionRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindLatestTerraformVersion")
	rows, err := q.conn.Query(ctx, findLatestTerraformVersionSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindLatestTerraformVersion: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindLatestTerraformVersionRow, error) {
		var item FindLatestTerraformVersionRow
		if err := row.Scan(&item.Version, // 'version', 'Version', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Checkpoint, // 'checkpoint', 'Checkpoint', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
