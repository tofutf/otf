// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)

const upsertOrganizationTokenSQL = `INSERT INTO organization_tokens (
    organization_token_id,
    created_at,
    organization_name,
    expiry
) VALUES (
    $1,
    $2,
    $3,
    $4
) ON CONFLICT (organization_name) DO UPDATE
  SET created_at            = $2,
      organization_token_id = $1,
      expiry                = $4;`

type UpsertOrganizationTokenParams struct {
	OrganizationTokenID pgtype.Text        `json:"organization_token_id"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	Expiry              pgtype.Timestamptz `json:"expiry"`
}

// UpsertOrganizationToken implements Querier.UpsertOrganizationToken.
func (q *DBQuerier) UpsertOrganizationToken(ctx context.Context, params UpsertOrganizationTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertOrganizationToken")
	cmdTag, err := q.conn.Exec(ctx, upsertOrganizationTokenSQL, params.OrganizationTokenID, params.CreatedAt, params.OrganizationName, params.Expiry)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query UpsertOrganizationToken: %w", err)
	}
	return cmdTag, err
}

const findOrganizationTokensSQL = `SELECT *
FROM organization_tokens
WHERE organization_name = $1;`

type FindOrganizationTokensRow struct {
	OrganizationTokenID pgtype.Text        `json:"organization_token_id"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	Expiry              pgtype.Timestamptz `json:"expiry"`
}

// FindOrganizationTokens implements Querier.FindOrganizationTokens.
func (q *DBQuerier) FindOrganizationTokens(ctx context.Context, organizationName pgtype.Text) ([]FindOrganizationTokensRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrganizationTokens")
	rows, err := q.conn.Query(ctx, findOrganizationTokensSQL, organizationName)
	if err != nil {
		return nil, fmt.Errorf("query FindOrganizationTokens: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindOrganizationTokensRow, error) {
		var item FindOrganizationTokensRow
		if err := row.Scan(&item.OrganizationTokenID, // 'organization_token_id', 'OrganizationTokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,        // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.OrganizationName, // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Expiry,           // 'expiry', 'Expiry', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findOrganizationTokensByNameSQL = `SELECT *
FROM organization_tokens
WHERE organization_name = $1;`

type FindOrganizationTokensByNameRow struct {
	OrganizationTokenID pgtype.Text        `json:"organization_token_id"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	Expiry              pgtype.Timestamptz `json:"expiry"`
}

// FindOrganizationTokensByName implements Querier.FindOrganizationTokensByName.
func (q *DBQuerier) FindOrganizationTokensByName(ctx context.Context, organizationName pgtype.Text) (FindOrganizationTokensByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrganizationTokensByName")
	rows, err := q.conn.Query(ctx, findOrganizationTokensByNameSQL, organizationName)
	if err != nil {
		return FindOrganizationTokensByNameRow{}, fmt.Errorf("query FindOrganizationTokensByName: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindOrganizationTokensByNameRow, error) {
		var item FindOrganizationTokensByNameRow
		if err := row.Scan(&item.OrganizationTokenID, // 'organization_token_id', 'OrganizationTokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,        // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.OrganizationName, // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Expiry,           // 'expiry', 'Expiry', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findOrganizationTokensByIDSQL = `SELECT *
FROM organization_tokens
WHERE organization_token_id = $1;`

type FindOrganizationTokensByIDRow struct {
	OrganizationTokenID pgtype.Text        `json:"organization_token_id"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	Expiry              pgtype.Timestamptz `json:"expiry"`
}

// FindOrganizationTokensByID implements Querier.FindOrganizationTokensByID.
func (q *DBQuerier) FindOrganizationTokensByID(ctx context.Context, organizationTokenID pgtype.Text) (FindOrganizationTokensByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrganizationTokensByID")
	rows, err := q.conn.Query(ctx, findOrganizationTokensByIDSQL, organizationTokenID)
	if err != nil {
		return FindOrganizationTokensByIDRow{}, fmt.Errorf("query FindOrganizationTokensByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindOrganizationTokensByIDRow, error) {
		var item FindOrganizationTokensByIDRow
		if err := row.Scan(&item.OrganizationTokenID, // 'organization_token_id', 'OrganizationTokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,        // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.OrganizationName, // 'organization_name', 'OrganizationName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Expiry,           // 'expiry', 'Expiry', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteOrganiationTokenByNameSQL = `DELETE
FROM organization_tokens
WHERE organization_name = $1
RETURNING organization_token_id;`

// DeleteOrganiationTokenByName implements Querier.DeleteOrganiationTokenByName.
func (q *DBQuerier) DeleteOrganiationTokenByName(ctx context.Context, organizationName pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteOrganiationTokenByName")
	rows, err := q.conn.Query(ctx, deleteOrganiationTokenByNameSQL, organizationName)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query DeleteOrganiationTokenByName: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
