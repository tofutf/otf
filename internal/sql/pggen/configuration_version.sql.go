// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

const insertConfigurationVersionSQL = `INSERT INTO configuration_versions (
    configuration_version_id,
    created_at,
    auto_queue_runs,
    source,
    speculative,
    status,
    workspace_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
);`

type InsertConfigurationVersionParams struct {
	ID            pgtype.Text        `json:"id"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	AutoQueueRuns pgtype.Bool        `json:"auto_queue_runs"`
	Source        pgtype.Text        `json:"source"`
	Speculative   pgtype.Bool        `json:"speculative"`
	Status        pgtype.Text        `json:"status"`
	WorkspaceID   pgtype.Text        `json:"workspace_id"`
}

// InsertConfigurationVersion implements Querier.InsertConfigurationVersion.
func (q *DBQuerier) InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertConfigurationVersion")
	cmdTag, err := q.conn.Exec(ctx, insertConfigurationVersionSQL, params.ID, params.CreatedAt, params.AutoQueueRuns, params.Source, params.Speculative, params.Status, params.WorkspaceID)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertConfigurationVersion: %w", err)
	}
	return cmdTag, err
}

const insertConfigurationVersionStatusTimestampSQL = `INSERT INTO configuration_version_status_timestamps (
    configuration_version_id,
    status,
    timestamp
) VALUES (
    $1,
    $2,
    $3
)
RETURNING *;`

type InsertConfigurationVersionStatusTimestampParams struct {
	ID        pgtype.Text        `json:"id"`
	Status    pgtype.Text        `json:"status"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

type InsertConfigurationVersionStatusTimestampRow struct {
	ConfigurationVersionID pgtype.Text        `json:"configuration_version_id"`
	Status                 pgtype.Text        `json:"status"`
	Timestamp              pgtype.Timestamptz `json:"timestamp"`
}

// InsertConfigurationVersionStatusTimestamp implements Querier.InsertConfigurationVersionStatusTimestamp.
func (q *DBQuerier) InsertConfigurationVersionStatusTimestamp(ctx context.Context, params InsertConfigurationVersionStatusTimestampParams) (InsertConfigurationVersionStatusTimestampRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertConfigurationVersionStatusTimestamp")
	rows, err := q.conn.Query(ctx, insertConfigurationVersionStatusTimestampSQL, params.ID, params.Status, params.Timestamp)
	if err != nil {
		return InsertConfigurationVersionStatusTimestampRow{}, fmt.Errorf("query InsertConfigurationVersionStatusTimestamp: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (InsertConfigurationVersionStatusTimestampRow, error) {
		var item InsertConfigurationVersionStatusTimestampRow
		if err := row.Scan(&item.ConfigurationVersionID, // 'configuration_version_id', 'ConfigurationVersionID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Status,    // 'status', 'Status', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Timestamp, // 'timestamp', 'Timestamp', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findConfigurationVersionsByWorkspaceIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    configuration_versions.workspace_id,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps,
    (ingress_attributes.*)::"ingress_attributes"
FROM configuration_versions
JOIN workspaces USING (workspace_id)
LEFT JOIN ingress_attributes USING (configuration_version_id)
WHERE workspaces.workspace_id = $1
LIMIT $2
OFFSET $3;`

type FindConfigurationVersionsByWorkspaceIDParams struct {
	WorkspaceID pgtype.Text `json:"workspace_id"`
	Limit       pgtype.Int8 `json:"limit"`
	Offset      pgtype.Int8 `json:"offset"`
}

type FindConfigurationVersionsByWorkspaceIDRow struct {
	ConfigurationVersionID               pgtype.Text                             `json:"configuration_version_id"`
	CreatedAt                            pgtype.Timestamptz                      `json:"created_at"`
	AutoQueueRuns                        pgtype.Bool                             `json:"auto_queue_runs"`
	Source                               pgtype.Text                             `json:"source"`
	Speculative                          pgtype.Bool                             `json:"speculative"`
	Status                               pgtype.Text                             `json:"status"`
	WorkspaceID                          pgtype.Text                             `json:"workspace_id"`
	ConfigurationVersionStatusTimestamps []*ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
	IngressAttributes                    *IngressAttributes                      `json:"ingress_attributes"`
}

// FindConfigurationVersionsByWorkspaceID implements Querier.FindConfigurationVersionsByWorkspaceID.
func (q *DBQuerier) FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) ([]FindConfigurationVersionsByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionsByWorkspaceID")
	rows, err := q.conn.Query(ctx, findConfigurationVersionsByWorkspaceIDSQL, params.WorkspaceID, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query FindConfigurationVersionsByWorkspaceID: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindConfigurationVersionsByWorkspaceIDRow, error) {
		var item FindConfigurationVersionsByWorkspaceIDRow
		if err := row.Scan(&item.ConfigurationVersionID, // 'configuration_version_id', 'ConfigurationVersionID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,     // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.AutoQueueRuns, // 'auto_queue_runs', 'AutoQueueRuns', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Source,        // 'source', 'Source', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Speculative,   // 'speculative', 'Speculative', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Status,        // 'status', 'Status', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.WorkspaceID,   // 'workspace_id', 'WorkspaceID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.ConfigurationVersionStatusTimestamps, // 'configuration_version_status_timestamps', 'ConfigurationVersionStatusTimestamps', '[]*ConfigurationVersionStatusTimestamps', '', '[]*ConfigurationVersionStatusTimestamps'
			&item.IngressAttributes,                    // 'ingress_attributes', 'IngressAttributes', '*IngressAttributes', '', '*IngressAttributes'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const countConfigurationVersionsByWorkspaceIDSQL = `SELECT count(*)
FROM configuration_versions
WHERE configuration_versions.workspace_id = $1
;`

// CountConfigurationVersionsByWorkspaceID implements Querier.CountConfigurationVersionsByWorkspaceID.
func (q *DBQuerier) CountConfigurationVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgtype.Int8, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CountConfigurationVersionsByWorkspaceID")
	rows, err := q.conn.Query(ctx, countConfigurationVersionsByWorkspaceIDSQL, workspaceID)
	if err != nil {
		return pgtype.Int8{}, fmt.Errorf("query CountConfigurationVersionsByWorkspaceID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Int8, error) {
		var item pgtype.Int8
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findConfigurationVersionByIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    configuration_versions.workspace_id,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps,
    (ingress_attributes.*)::"ingress_attributes"
FROM configuration_versions
JOIN workspaces USING (workspace_id)
LEFT JOIN ingress_attributes USING (configuration_version_id)
WHERE configuration_version_id = $1;`

type FindConfigurationVersionByIDRow struct {
	ConfigurationVersionID               pgtype.Text                             `json:"configuration_version_id"`
	CreatedAt                            pgtype.Timestamptz                      `json:"created_at"`
	AutoQueueRuns                        pgtype.Bool                             `json:"auto_queue_runs"`
	Source                               pgtype.Text                             `json:"source"`
	Speculative                          pgtype.Bool                             `json:"speculative"`
	Status                               pgtype.Text                             `json:"status"`
	WorkspaceID                          pgtype.Text                             `json:"workspace_id"`
	ConfigurationVersionStatusTimestamps []*ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
	IngressAttributes                    *IngressAttributes                      `json:"ingress_attributes"`
}

// FindConfigurationVersionByID implements Querier.FindConfigurationVersionByID.
func (q *DBQuerier) FindConfigurationVersionByID(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionByID")
	rows, err := q.conn.Query(ctx, findConfigurationVersionByIDSQL, configurationVersionID)
	if err != nil {
		return FindConfigurationVersionByIDRow{}, fmt.Errorf("query FindConfigurationVersionByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindConfigurationVersionByIDRow, error) {
		var item FindConfigurationVersionByIDRow
		if err := row.Scan(&item.ConfigurationVersionID, // 'configuration_version_id', 'ConfigurationVersionID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,     // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.AutoQueueRuns, // 'auto_queue_runs', 'AutoQueueRuns', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Source,        // 'source', 'Source', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Speculative,   // 'speculative', 'Speculative', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Status,        // 'status', 'Status', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.WorkspaceID,   // 'workspace_id', 'WorkspaceID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.ConfigurationVersionStatusTimestamps, // 'configuration_version_status_timestamps', 'ConfigurationVersionStatusTimestamps', '[]*ConfigurationVersionStatusTimestamps', '', '[]*ConfigurationVersionStatusTimestamps'
			&item.IngressAttributes,                    // 'ingress_attributes', 'IngressAttributes', '*IngressAttributes', '', '*IngressAttributes'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findConfigurationVersionLatestByWorkspaceIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    configuration_versions.workspace_id,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps,
    (ingress_attributes.*)::"ingress_attributes"
FROM configuration_versions
JOIN workspaces USING (workspace_id)
LEFT JOIN ingress_attributes USING (configuration_version_id)
WHERE workspace_id = $1
ORDER BY configuration_versions.created_at DESC;`

type FindConfigurationVersionLatestByWorkspaceIDRow struct {
	ConfigurationVersionID               pgtype.Text                             `json:"configuration_version_id"`
	CreatedAt                            pgtype.Timestamptz                      `json:"created_at"`
	AutoQueueRuns                        pgtype.Bool                             `json:"auto_queue_runs"`
	Source                               pgtype.Text                             `json:"source"`
	Speculative                          pgtype.Bool                             `json:"speculative"`
	Status                               pgtype.Text                             `json:"status"`
	WorkspaceID                          pgtype.Text                             `json:"workspace_id"`
	ConfigurationVersionStatusTimestamps []*ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
	IngressAttributes                    *IngressAttributes                      `json:"ingress_attributes"`
}

// FindConfigurationVersionLatestByWorkspaceID implements Querier.FindConfigurationVersionLatestByWorkspaceID.
func (q *DBQuerier) FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindConfigurationVersionLatestByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionLatestByWorkspaceID")
	rows, err := q.conn.Query(ctx, findConfigurationVersionLatestByWorkspaceIDSQL, workspaceID)
	if err != nil {
		return FindConfigurationVersionLatestByWorkspaceIDRow{}, fmt.Errorf("query FindConfigurationVersionLatestByWorkspaceID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindConfigurationVersionLatestByWorkspaceIDRow, error) {
		var item FindConfigurationVersionLatestByWorkspaceIDRow
		if err := row.Scan(&item.ConfigurationVersionID, // 'configuration_version_id', 'ConfigurationVersionID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,     // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.AutoQueueRuns, // 'auto_queue_runs', 'AutoQueueRuns', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Source,        // 'source', 'Source', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Speculative,   // 'speculative', 'Speculative', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Status,        // 'status', 'Status', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.WorkspaceID,   // 'workspace_id', 'WorkspaceID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.ConfigurationVersionStatusTimestamps, // 'configuration_version_status_timestamps', 'ConfigurationVersionStatusTimestamps', '[]*ConfigurationVersionStatusTimestamps', '', '[]*ConfigurationVersionStatusTimestamps'
			&item.IngressAttributes,                    // 'ingress_attributes', 'IngressAttributes', '*IngressAttributes', '', '*IngressAttributes'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findConfigurationVersionByIDForUpdateSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    configuration_versions.workspace_id,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps,
    (ingress_attributes.*)::"ingress_attributes"
FROM configuration_versions
JOIN workspaces USING (workspace_id)
LEFT JOIN ingress_attributes USING (configuration_version_id)
WHERE configuration_version_id = $1
FOR UPDATE OF configuration_versions;`

type FindConfigurationVersionByIDForUpdateRow struct {
	ConfigurationVersionID               pgtype.Text                             `json:"configuration_version_id"`
	CreatedAt                            pgtype.Timestamptz                      `json:"created_at"`
	AutoQueueRuns                        pgtype.Bool                             `json:"auto_queue_runs"`
	Source                               pgtype.Text                             `json:"source"`
	Speculative                          pgtype.Bool                             `json:"speculative"`
	Status                               pgtype.Text                             `json:"status"`
	WorkspaceID                          pgtype.Text                             `json:"workspace_id"`
	ConfigurationVersionStatusTimestamps []*ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
	IngressAttributes                    *IngressAttributes                      `json:"ingress_attributes"`
}

// FindConfigurationVersionByIDForUpdate implements Querier.FindConfigurationVersionByIDForUpdate.
func (q *DBQuerier) FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionByIDForUpdate")
	rows, err := q.conn.Query(ctx, findConfigurationVersionByIDForUpdateSQL, configurationVersionID)
	if err != nil {
		return FindConfigurationVersionByIDForUpdateRow{}, fmt.Errorf("query FindConfigurationVersionByIDForUpdate: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindConfigurationVersionByIDForUpdateRow, error) {
		var item FindConfigurationVersionByIDForUpdateRow
		if err := row.Scan(&item.ConfigurationVersionID, // 'configuration_version_id', 'ConfigurationVersionID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,     // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.AutoQueueRuns, // 'auto_queue_runs', 'AutoQueueRuns', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Source,        // 'source', 'Source', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Speculative,   // 'speculative', 'Speculative', 'pgtype.Bool', 'github.com/jackc/pgx/v5/pgtype', 'Bool'
			&item.Status,        // 'status', 'Status', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.WorkspaceID,   // 'workspace_id', 'WorkspaceID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.ConfigurationVersionStatusTimestamps, // 'configuration_version_status_timestamps', 'ConfigurationVersionStatusTimestamps', '[]*ConfigurationVersionStatusTimestamps', '', '[]*ConfigurationVersionStatusTimestamps'
			&item.IngressAttributes,                    // 'ingress_attributes', 'IngressAttributes', '*IngressAttributes', '', '*IngressAttributes'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const downloadConfigurationVersionSQL = `SELECT config
FROM configuration_versions
WHERE configuration_version_id = $1
AND   status                   = 'uploaded';`

// DownloadConfigurationVersion implements Querier.DownloadConfigurationVersion.
func (q *DBQuerier) DownloadConfigurationVersion(ctx context.Context, configurationVersionID pgtype.Text) ([]byte, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DownloadConfigurationVersion")
	rows, err := q.conn.Query(ctx, downloadConfigurationVersionSQL, configurationVersionID)
	if err != nil {
		return nil, fmt.Errorf("query DownloadConfigurationVersion: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ([]byte, error) {
		var item []byte
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const updateConfigurationVersionErroredByIDSQL = `UPDATE configuration_versions
SET
    status = 'errored'
WHERE configuration_version_id = $1
RETURNING configuration_version_id;`

// UpdateConfigurationVersionErroredByID implements Querier.UpdateConfigurationVersionErroredByID.
func (q *DBQuerier) UpdateConfigurationVersionErroredByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateConfigurationVersionErroredByID")
	rows, err := q.conn.Query(ctx, updateConfigurationVersionErroredByIDSQL, id)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query UpdateConfigurationVersionErroredByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const updateConfigurationVersionConfigByIDSQL = `UPDATE configuration_versions
SET
    config = $1,
    status = 'uploaded'
WHERE configuration_version_id = $2
RETURNING configuration_version_id;`

// UpdateConfigurationVersionConfigByID implements Querier.UpdateConfigurationVersionConfigByID.
func (q *DBQuerier) UpdateConfigurationVersionConfigByID(ctx context.Context, config []byte, id pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateConfigurationVersionConfigByID")
	rows, err := q.conn.Query(ctx, updateConfigurationVersionConfigByIDSQL, config, id)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query UpdateConfigurationVersionConfigByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteConfigurationVersionByIDSQL = `DELETE
FROM configuration_versions
WHERE configuration_version_id = $1
RETURNING configuration_version_id;`

// DeleteConfigurationVersionByID implements Querier.DeleteConfigurationVersionByID.
func (q *DBQuerier) DeleteConfigurationVersionByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteConfigurationVersionByID")
	rows, err := q.conn.Query(ctx, deleteConfigurationVersionByIDSQL, id)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query DeleteConfigurationVersionByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
