// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)

const upsertWorkspacePermissionSQL = `INSERT INTO workspace_permissions (
    workspace_id,
    team_id,
    role
) VALUES (
    $1,
    $2,
    $3
) ON CONFLICT (workspace_id, team_id) DO UPDATE SET role = $3;`

type UpsertWorkspacePermissionParams struct {
	WorkspaceID pgtype.Text `json:"workspace_id"`
	TeamID      pgtype.Text `json:"team_id"`
	Role        pgtype.Text `json:"role"`
}

// UpsertWorkspacePermission implements Querier.UpsertWorkspacePermission.
func (q *DBQuerier) UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertWorkspacePermission")
	cmdTag, err := q.conn.Exec(ctx, upsertWorkspacePermissionSQL, params.WorkspaceID, params.TeamID, params.Role)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query UpsertWorkspacePermission: %w", err)
	}
	return cmdTag, err
}

const findWorkspacePermissionsByWorkspaceIDSQL = `SELECT *
FROM workspace_permissions
WHERE workspace_id = $1;`

type FindWorkspacePermissionsByWorkspaceIDRow struct {
	WorkspaceID pgtype.Text `json:"workspace_id"`
	TeamID      pgtype.Text `json:"team_id"`
	Role        pgtype.Text `json:"role"`
}

// FindWorkspacePermissionsByWorkspaceID implements Querier.FindWorkspacePermissionsByWorkspaceID.
func (q *DBQuerier) FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspacePermissionsByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspacePermissionsByWorkspaceID")
	rows, err := q.conn.Query(ctx, findWorkspacePermissionsByWorkspaceIDSQL, workspaceID)
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByWorkspaceID: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindWorkspacePermissionsByWorkspaceIDRow, error) {
		var item FindWorkspacePermissionsByWorkspaceIDRow
		if err := row.Scan(&item.WorkspaceID, // 'workspace_id', 'WorkspaceID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.TeamID, // 'team_id', 'TeamID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Role,   // 'role', 'Role', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteWorkspacePermissionByIDSQL = `DELETE
FROM workspace_permissions
WHERE workspace_id = $1
AND team_id = $2;`

// DeleteWorkspacePermissionByID implements Querier.DeleteWorkspacePermissionByID.
func (q *DBQuerier) DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspacePermissionByID")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspacePermissionByIDSQL, workspaceID, teamID)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query DeleteWorkspacePermissionByID: %w", err)
	}
	return cmdTag, err
}
