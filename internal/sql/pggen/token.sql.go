// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)

const insertTokenSQL = `INSERT INTO tokens (
    token_id,
    created_at,
    description,
    username
) VALUES (
    $1,
    $2,
    $3,
    $4
);`

type InsertTokenParams struct {
	TokenID     pgtype.Text        `json:"token_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Description pgtype.Text        `json:"description"`
	Username    pgtype.Text        `json:"username"`
}

// InsertToken implements Querier.InsertToken.
func (q *DBQuerier) InsertToken(ctx context.Context, params InsertTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertToken")
	cmdTag, err := q.conn.Exec(ctx, insertTokenSQL, params.TokenID, params.CreatedAt, params.Description, params.Username)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertToken: %w", err)
	}
	return cmdTag, err
}

const findTokensByUsernameSQL = `SELECT *
FROM tokens
WHERE username = $1
;`

type FindTokensByUsernameRow struct {
	TokenID     pgtype.Text        `json:"token_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Description pgtype.Text        `json:"description"`
	Username    pgtype.Text        `json:"username"`
}

// FindTokensByUsername implements Querier.FindTokensByUsername.
func (q *DBQuerier) FindTokensByUsername(ctx context.Context, username pgtype.Text) ([]FindTokensByUsernameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTokensByUsername")
	rows, err := q.conn.Query(ctx, findTokensByUsernameSQL, username)
	if err != nil {
		return nil, fmt.Errorf("query FindTokensByUsername: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindTokensByUsernameRow, error) {
		var item FindTokensByUsernameRow
		if err := row.Scan(&item.TokenID, // 'token_id', 'TokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,   // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.Description, // 'description', 'Description', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Username,    // 'username', 'Username', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findTokenByIDSQL = `SELECT *
FROM tokens
WHERE token_id = $1
;`

type FindTokenByIDRow struct {
	TokenID     pgtype.Text        `json:"token_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	Description pgtype.Text        `json:"description"`
	Username    pgtype.Text        `json:"username"`
}

// FindTokenByID implements Querier.FindTokenByID.
func (q *DBQuerier) FindTokenByID(ctx context.Context, tokenID pgtype.Text) (FindTokenByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTokenByID")
	rows, err := q.conn.Query(ctx, findTokenByIDSQL, tokenID)
	if err != nil {
		return FindTokenByIDRow{}, fmt.Errorf("query FindTokenByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindTokenByIDRow, error) {
		var item FindTokenByIDRow
		if err := row.Scan(&item.TokenID, // 'token_id', 'TokenID', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.CreatedAt,   // 'created_at', 'CreatedAt', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.Description, // 'description', 'Description', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Username,    // 'username', 'Username', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const deleteTokenByIDSQL = `DELETE
FROM tokens
WHERE token_id = $1
RETURNING token_id
;`

// DeleteTokenByID implements Querier.DeleteTokenByID.
func (q *DBQuerier) DeleteTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTokenByID")
	rows, err := q.conn.Query(ctx, deleteTokenByIDSQL, tokenID)
	if err != nil {
		return pgtype.Text{}, fmt.Errorf("query DeleteTokenByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Text, error) {
		var item pgtype.Text
		if err := row.Scan(&item); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
