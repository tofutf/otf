// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package pggen

//go:generate gowrap gen -p github.com/tofutf/tofutf/internal/sql/pggen -i Querier -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o opentelemetry.go -l ""

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// QuerierWithTracing implements Querier interface instrumented with opentracing spans
type QuerierWithTracing struct {
	Querier
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewQuerierWithTracing returns QuerierWithTracing
func NewQuerierWithTracing(base Querier, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) QuerierWithTracing {
	d := QuerierWithTracing{
		Querier:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// CountConfigurationVersionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) CountConfigurationVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountConfigurationVersionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountConfigurationVersionsByWorkspaceID(ctx, workspaceID)
}

// CountOrganizations implements Querier
func (_d QuerierWithTracing) CountOrganizations(ctx context.Context, names []string) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountOrganizations")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"names": names}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountOrganizations(ctx, names)
}

// CountRuns implements Querier
func (_d QuerierWithTracing) CountRuns(ctx context.Context, params CountRunsParams) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountRuns")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountRuns(ctx, params)
}

// CountStateVersionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) CountStateVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountStateVersionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountStateVersionsByWorkspaceID(ctx, workspaceID)
}

// CountTags implements Querier
func (_d QuerierWithTracing) CountTags(ctx context.Context, organizationName pgtype.Text) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountTags")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountTags(ctx, organizationName)
}

// CountWorkspaceTags implements Querier
func (_d QuerierWithTracing) CountWorkspaceTags(ctx context.Context, workspaceID pgtype.Text) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountWorkspaceTags")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountWorkspaceTags(ctx, workspaceID)
}

// CountWorkspaces implements Querier
func (_d QuerierWithTracing) CountWorkspaces(ctx context.Context, params CountWorkspacesParams) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountWorkspaces")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountWorkspaces(ctx, params)
}

// CountWorkspacesByUsername implements Querier
func (_d QuerierWithTracing) CountWorkspacesByUsername(ctx context.Context, organizationName pgtype.Text, username pgtype.Text) (i1 pgtype.Int8, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.CountWorkspacesByUsername")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName,
				"username":         username}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.CountWorkspacesByUsername(ctx, organizationName, username)
}

// DeleteAgent implements Querier
func (_d QuerierWithTracing) DeleteAgent(ctx context.Context, agentID pgtype.Text) (d1 DeleteAgentRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteAgent")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteAgent(ctx, agentID)
}

// DeleteAgentPool implements Querier
func (_d QuerierWithTracing) DeleteAgentPool(ctx context.Context, poolID pgtype.Text) (d1 DeleteAgentPoolRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"poolID": poolID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteAgentPool(ctx, poolID)
}

// DeleteAgentPoolAllowedWorkspace implements Querier
func (_d QuerierWithTracing) DeleteAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteAgentPoolAllowedWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"poolID":      poolID,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteAgentPoolAllowedWorkspace(ctx, poolID, workspaceID)
}

// DeleteAgentTokenByID implements Querier
func (_d QuerierWithTracing) DeleteAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteAgentTokenByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":          ctx,
				"agentTokenID": agentTokenID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteAgentTokenByID(ctx, agentTokenID)
}

// DeleteConfigurationVersionByID implements Querier
func (_d QuerierWithTracing) DeleteConfigurationVersionByID(ctx context.Context, id pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteConfigurationVersionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteConfigurationVersionByID(ctx, id)
}

// DeleteGPGKey implements Querier
func (_d QuerierWithTracing) DeleteGPGKey(ctx context.Context, keyID pgtype.Text, organizationName pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteGPGKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"keyID":            keyID,
				"organizationName": organizationName}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteGPGKey(ctx, keyID, organizationName)
}

// DeleteGithubApp implements Querier
func (_d QuerierWithTracing) DeleteGithubApp(ctx context.Context, githubAppID pgtype.Int8) (d1 DeleteGithubAppRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteGithubApp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"githubAppID": githubAppID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteGithubApp(ctx, githubAppID)
}

// DeleteModuleByID implements Querier
func (_d QuerierWithTracing) DeleteModuleByID(ctx context.Context, moduleID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteModuleByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"moduleID": moduleID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteModuleByID(ctx, moduleID)
}

// DeleteModuleConnectionByID implements Querier
func (_d QuerierWithTracing) DeleteModuleConnectionByID(ctx context.Context, moduleID pgtype.Text) (d1 DeleteModuleConnectionByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteModuleConnectionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"moduleID": moduleID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteModuleConnectionByID(ctx, moduleID)
}

// DeleteModuleVersionByID implements Querier
func (_d QuerierWithTracing) DeleteModuleVersionByID(ctx context.Context, moduleVersionID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteModuleVersionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"moduleVersionID": moduleVersionID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteModuleVersionByID(ctx, moduleVersionID)
}

// DeleteNotificationConfigurationByID implements Querier
func (_d QuerierWithTracing) DeleteNotificationConfigurationByID(ctx context.Context, notificationConfigurationID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteNotificationConfigurationByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                         ctx,
				"notificationConfigurationID": notificationConfigurationID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteNotificationConfigurationByID(ctx, notificationConfigurationID)
}

// DeleteOrganiationTokenByName implements Querier
func (_d QuerierWithTracing) DeleteOrganiationTokenByName(ctx context.Context, organizationName pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteOrganiationTokenByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteOrganiationTokenByName(ctx, organizationName)
}

// DeleteOrganizationByName implements Querier
func (_d QuerierWithTracing) DeleteOrganizationByName(ctx context.Context, name pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteOrganizationByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteOrganizationByName(ctx, name)
}

// DeleteRepohookByID implements Querier
func (_d QuerierWithTracing) DeleteRepohookByID(ctx context.Context, repohookID pgtype.UUID) (d1 DeleteRepohookByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteRepohookByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"repohookID": repohookID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteRepohookByID(ctx, repohookID)
}

// DeleteRunByID implements Querier
func (_d QuerierWithTracing) DeleteRunByID(ctx context.Context, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteRunByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteRunByID(ctx, runID)
}

// DeleteStateVersionByID implements Querier
func (_d QuerierWithTracing) DeleteStateVersionByID(ctx context.Context, stateVersionID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteStateVersionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":            ctx,
				"stateVersionID": stateVersionID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteStateVersionByID(ctx, stateVersionID)
}

// DeleteTag implements Querier
func (_d QuerierWithTracing) DeleteTag(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteTag")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"tagID":            tagID,
				"organizationName": organizationName}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteTag(ctx, tagID, organizationName)
}

// DeleteTeamByID implements Querier
func (_d QuerierWithTracing) DeleteTeamByID(ctx context.Context, teamID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteTeamByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteTeamByID(ctx, teamID)
}

// DeleteTeamMembership implements Querier
func (_d QuerierWithTracing) DeleteTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) (ta1 []pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteTeamMembership")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"usernames": usernames,
				"teamID":    teamID}, map[string]interface{}{
				"ta1": ta1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteTeamMembership(ctx, usernames, teamID)
}

// DeleteTeamTokenByID implements Querier
func (_d QuerierWithTracing) DeleteTeamTokenByID(ctx context.Context, teamID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteTeamTokenByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteTeamTokenByID(ctx, teamID)
}

// DeleteTokenByID implements Querier
func (_d QuerierWithTracing) DeleteTokenByID(ctx context.Context, tokenID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteTokenByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteTokenByID(ctx, tokenID)
}

// DeleteUserByID implements Querier
func (_d QuerierWithTracing) DeleteUserByID(ctx context.Context, userID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteUserByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteUserByID(ctx, userID)
}

// DeleteUserByUsername implements Querier
func (_d QuerierWithTracing) DeleteUserByUsername(ctx context.Context, username pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteUserByUsername")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"username": username}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteUserByUsername(ctx, username)
}

// DeleteVCSProviderByID implements Querier
func (_d QuerierWithTracing) DeleteVCSProviderByID(ctx context.Context, vcsProviderID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVCSProviderByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"vcsProviderID": vcsProviderID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVCSProviderByID(ctx, vcsProviderID)
}

// DeleteVariableByID implements Querier
func (_d QuerierWithTracing) DeleteVariableByID(ctx context.Context, variableID pgtype.Text) (d1 DeleteVariableByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVariableByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"variableID": variableID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVariableByID(ctx, variableID)
}

// DeleteVariableSetByID implements Querier
func (_d QuerierWithTracing) DeleteVariableSetByID(ctx context.Context, variableSetID pgtype.Text) (d1 DeleteVariableSetByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVariableSetByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVariableSetByID(ctx, variableSetID)
}

// DeleteVariableSetVariable implements Querier
func (_d QuerierWithTracing) DeleteVariableSetVariable(ctx context.Context, variableSetID pgtype.Text, variableID pgtype.Text) (d1 DeleteVariableSetVariableRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVariableSetVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID,
				"variableID":    variableID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVariableSetVariable(ctx, variableSetID, variableID)
}

// DeleteVariableSetWorkspace implements Querier
func (_d QuerierWithTracing) DeleteVariableSetWorkspace(ctx context.Context, variableSetID pgtype.Text, workspaceID pgtype.Text) (d1 DeleteVariableSetWorkspaceRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVariableSetWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID,
				"workspaceID":   workspaceID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVariableSetWorkspace(ctx, variableSetID, workspaceID)
}

// DeleteVariableSetWorkspaces implements Querier
func (_d QuerierWithTracing) DeleteVariableSetWorkspaces(ctx context.Context, variableSetID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteVariableSetWorkspaces")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteVariableSetWorkspaces(ctx, variableSetID)
}

// DeleteWorkspaceByID implements Querier
func (_d QuerierWithTracing) DeleteWorkspaceByID(ctx context.Context, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteWorkspaceByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteWorkspaceByID(ctx, workspaceID)
}

// DeleteWorkspaceConnectionByID implements Querier
func (_d QuerierWithTracing) DeleteWorkspaceConnectionByID(ctx context.Context, workspaceID pgtype.Text) (d1 DeleteWorkspaceConnectionByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteWorkspaceConnectionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteWorkspaceConnectionByID(ctx, workspaceID)
}

// DeleteWorkspacePermissionByID implements Querier
func (_d QuerierWithTracing) DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteWorkspacePermissionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID,
				"teamID":      teamID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteWorkspacePermissionByID(ctx, workspaceID, teamID)
}

// DeleteWorkspaceTag implements Querier
func (_d QuerierWithTracing) DeleteWorkspaceTag(ctx context.Context, workspaceID pgtype.Text, tagID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteWorkspaceTag")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID,
				"tagID":       tagID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteWorkspaceTag(ctx, workspaceID, tagID)
}

// DeleteWorkspaceVariableByID implements Querier
func (_d QuerierWithTracing) DeleteWorkspaceVariableByID(ctx context.Context, variableID pgtype.Text) (d1 DeleteWorkspaceVariableByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DeleteWorkspaceVariableByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"variableID": variableID}, map[string]interface{}{
				"d1":  d1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DeleteWorkspaceVariableByID(ctx, variableID)
}

// DiscardPendingStateVersionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) DiscardPendingStateVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DiscardPendingStateVersionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DiscardPendingStateVersionsByWorkspaceID(ctx, workspaceID)
}

// DownloadConfigurationVersion implements Querier
func (_d QuerierWithTracing) DownloadConfigurationVersion(ctx context.Context, configurationVersionID pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.DownloadConfigurationVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                    ctx,
				"configurationVersionID": configurationVersionID}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.DownloadConfigurationVersion(ctx, configurationVersionID)
}

// FindAgentByID implements Querier
func (_d QuerierWithTracing) FindAgentByID(ctx context.Context, agentID pgtype.Text) (f1 FindAgentByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentByID(ctx, agentID)
}

// FindAgentByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindAgentByIDForUpdate(ctx context.Context, agentID pgtype.Text) (f1 FindAgentByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentByIDForUpdate(ctx, agentID)
}

// FindAgentPool implements Querier
func (_d QuerierWithTracing) FindAgentPool(ctx context.Context, poolID pgtype.Text) (f1 FindAgentPoolRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"poolID": poolID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentPool(ctx, poolID)
}

// FindAgentPoolByAgentTokenID implements Querier
func (_d QuerierWithTracing) FindAgentPoolByAgentTokenID(ctx context.Context, agentTokenID pgtype.Text) (f1 FindAgentPoolByAgentTokenIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentPoolByAgentTokenID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":          ctx,
				"agentTokenID": agentTokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentPoolByAgentTokenID(ctx, agentTokenID)
}

// FindAgentPools implements Querier
func (_d QuerierWithTracing) FindAgentPools(ctx context.Context) (fa1 []FindAgentPoolsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentPools")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentPools(ctx)
}

// FindAgentPoolsByOrganization implements Querier
func (_d QuerierWithTracing) FindAgentPoolsByOrganization(ctx context.Context, params FindAgentPoolsByOrganizationParams) (fa1 []FindAgentPoolsByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentPoolsByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentPoolsByOrganization(ctx, params)
}

// FindAgentTokenByID implements Querier
func (_d QuerierWithTracing) FindAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (f1 FindAgentTokenByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentTokenByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":          ctx,
				"agentTokenID": agentTokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentTokenByID(ctx, agentTokenID)
}

// FindAgentTokensByAgentPoolID implements Querier
func (_d QuerierWithTracing) FindAgentTokensByAgentPoolID(ctx context.Context, agentPoolID pgtype.Text) (fa1 []FindAgentTokensByAgentPoolIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentTokensByAgentPoolID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"agentPoolID": agentPoolID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentTokensByAgentPoolID(ctx, agentPoolID)
}

// FindAgents implements Querier
func (_d QuerierWithTracing) FindAgents(ctx context.Context) (fa1 []FindAgentsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgents")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgents(ctx)
}

// FindAgentsByOrganization implements Querier
func (_d QuerierWithTracing) FindAgentsByOrganization(ctx context.Context, organizationName pgtype.Text) (fa1 []FindAgentsByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentsByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentsByOrganization(ctx, organizationName)
}

// FindAgentsByPoolID implements Querier
func (_d QuerierWithTracing) FindAgentsByPoolID(ctx context.Context, agentPoolID pgtype.Text) (fa1 []FindAgentsByPoolIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAgentsByPoolID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"agentPoolID": agentPoolID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAgentsByPoolID(ctx, agentPoolID)
}

// FindAllNotificationConfigurations implements Querier
func (_d QuerierWithTracing) FindAllNotificationConfigurations(ctx context.Context) (fa1 []FindAllNotificationConfigurationsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAllNotificationConfigurations")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAllNotificationConfigurations(ctx)
}

// FindAllocatedJobs implements Querier
func (_d QuerierWithTracing) FindAllocatedJobs(ctx context.Context, agentID pgtype.Text) (fa1 []FindAllocatedJobsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAllocatedJobs")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAllocatedJobs(ctx, agentID)
}

// FindAndUpdateSignaledJobs implements Querier
func (_d QuerierWithTracing) FindAndUpdateSignaledJobs(ctx context.Context, agentID pgtype.Text) (fa1 []FindAndUpdateSignaledJobsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindAndUpdateSignaledJobs")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"agentID": agentID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindAndUpdateSignaledJobs(ctx, agentID)
}

// FindConfigurationVersionByID implements Querier
func (_d QuerierWithTracing) FindConfigurationVersionByID(ctx context.Context, configurationVersionID pgtype.Text) (f1 FindConfigurationVersionByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindConfigurationVersionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                    ctx,
				"configurationVersionID": configurationVersionID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindConfigurationVersionByID(ctx, configurationVersionID)
}

// FindConfigurationVersionByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID pgtype.Text) (f1 FindConfigurationVersionByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindConfigurationVersionByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                    ctx,
				"configurationVersionID": configurationVersionID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindConfigurationVersionByIDForUpdate(ctx, configurationVersionID)
}

// FindConfigurationVersionLatestByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (f1 FindConfigurationVersionLatestByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindConfigurationVersionLatestByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindConfigurationVersionLatestByWorkspaceID(ctx, workspaceID)
}

// FindConfigurationVersionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) (fa1 []FindConfigurationVersionsByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindConfigurationVersionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindConfigurationVersionsByWorkspaceID(ctx, params)
}

// FindCurrentStateVersionByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindCurrentStateVersionByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (f1 FindCurrentStateVersionByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindCurrentStateVersionByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindCurrentStateVersionByWorkspaceID(ctx, workspaceID)
}

// FindGithubApp implements Querier
func (_d QuerierWithTracing) FindGithubApp(ctx context.Context) (f1 FindGithubAppRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindGithubApp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindGithubApp(ctx)
}

// FindJob implements Querier
func (_d QuerierWithTracing) FindJob(ctx context.Context, runID pgtype.Text, phase pgtype.Text) (f1 FindJobRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindJob")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID,
				"phase": phase}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindJob(ctx, runID, phase)
}

// FindJobForUpdate implements Querier
func (_d QuerierWithTracing) FindJobForUpdate(ctx context.Context, runID pgtype.Text, phase pgtype.Text) (f1 FindJobForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindJobForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID,
				"phase": phase}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindJobForUpdate(ctx, runID, phase)
}

// FindJobs implements Querier
func (_d QuerierWithTracing) FindJobs(ctx context.Context) (fa1 []FindJobsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindJobs")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindJobs(ctx)
}

// FindLatestTerraformVersion implements Querier
func (_d QuerierWithTracing) FindLatestTerraformVersion(ctx context.Context) (fa1 []FindLatestTerraformVersionRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindLatestTerraformVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindLatestTerraformVersion(ctx)
}

// FindLogChunkByID implements Querier
func (_d QuerierWithTracing) FindLogChunkByID(ctx context.Context, chunkID pgtype.Int4) (f1 FindLogChunkByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindLogChunkByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"chunkID": chunkID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindLogChunkByID(ctx, chunkID)
}

// FindLogs implements Querier
func (_d QuerierWithTracing) FindLogs(ctx context.Context, runID pgtype.Text, phase pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindLogs")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID,
				"phase": phase}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindLogs(ctx, runID, phase)
}

// FindModuleByConnection implements Querier
func (_d QuerierWithTracing) FindModuleByConnection(ctx context.Context, vcsProviderID pgtype.Text, repoPath pgtype.Text) (f1 FindModuleByConnectionRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindModuleByConnection")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"vcsProviderID": vcsProviderID,
				"repoPath":      repoPath}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindModuleByConnection(ctx, vcsProviderID, repoPath)
}

// FindModuleByID implements Querier
func (_d QuerierWithTracing) FindModuleByID(ctx context.Context, id pgtype.Text) (f1 FindModuleByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindModuleByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindModuleByID(ctx, id)
}

// FindModuleByModuleVersionID implements Querier
func (_d QuerierWithTracing) FindModuleByModuleVersionID(ctx context.Context, moduleVersionID pgtype.Text) (f1 FindModuleByModuleVersionIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindModuleByModuleVersionID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"moduleVersionID": moduleVersionID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindModuleByModuleVersionID(ctx, moduleVersionID)
}

// FindModuleByName implements Querier
func (_d QuerierWithTracing) FindModuleByName(ctx context.Context, params FindModuleByNameParams) (f1 FindModuleByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindModuleByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindModuleByName(ctx, params)
}

// FindModuleTarball implements Querier
func (_d QuerierWithTracing) FindModuleTarball(ctx context.Context, moduleVersionID pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindModuleTarball")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"moduleVersionID": moduleVersionID}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindModuleTarball(ctx, moduleVersionID)
}

// FindNotificationConfiguration implements Querier
func (_d QuerierWithTracing) FindNotificationConfiguration(ctx context.Context, notificationConfigurationID pgtype.Text) (f1 FindNotificationConfigurationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindNotificationConfiguration")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                         ctx,
				"notificationConfigurationID": notificationConfigurationID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindNotificationConfiguration(ctx, notificationConfigurationID)
}

// FindNotificationConfigurationForUpdate implements Querier
func (_d QuerierWithTracing) FindNotificationConfigurationForUpdate(ctx context.Context, notificationConfigurationID pgtype.Text) (f1 FindNotificationConfigurationForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindNotificationConfigurationForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                         ctx,
				"notificationConfigurationID": notificationConfigurationID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindNotificationConfigurationForUpdate(ctx, notificationConfigurationID)
}

// FindNotificationConfigurationsByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindNotificationConfigurationsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (fa1 []FindNotificationConfigurationsByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindNotificationConfigurationsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindNotificationConfigurationsByWorkspaceID(ctx, workspaceID)
}

// FindOrganizationByID implements Querier
func (_d QuerierWithTracing) FindOrganizationByID(ctx context.Context, organizationID pgtype.Text) (f1 FindOrganizationByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":            ctx,
				"organizationID": organizationID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationByID(ctx, organizationID)
}

// FindOrganizationByName implements Querier
func (_d QuerierWithTracing) FindOrganizationByName(ctx context.Context, name pgtype.Text) (f1 FindOrganizationByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationByName(ctx, name)
}

// FindOrganizationByNameForUpdate implements Querier
func (_d QuerierWithTracing) FindOrganizationByNameForUpdate(ctx context.Context, name pgtype.Text) (f1 FindOrganizationByNameForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationByNameForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"name": name}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationByNameForUpdate(ctx, name)
}

// FindOrganizationNameByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindOrganizationNameByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationNameByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationNameByWorkspaceID(ctx, workspaceID)
}

// FindOrganizationTokens implements Querier
func (_d QuerierWithTracing) FindOrganizationTokens(ctx context.Context, organizationName pgtype.Text) (fa1 []FindOrganizationTokensRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationTokens")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationTokens(ctx, organizationName)
}

// FindOrganizationTokensByID implements Querier
func (_d QuerierWithTracing) FindOrganizationTokensByID(ctx context.Context, organizationTokenID pgtype.Text) (f1 FindOrganizationTokensByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationTokensByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":                 ctx,
				"organizationTokenID": organizationTokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationTokensByID(ctx, organizationTokenID)
}

// FindOrganizationTokensByName implements Querier
func (_d QuerierWithTracing) FindOrganizationTokensByName(ctx context.Context, organizationName pgtype.Text) (f1 FindOrganizationTokensByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizationTokensByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizationTokensByName(ctx, organizationName)
}

// FindOrganizations implements Querier
func (_d QuerierWithTracing) FindOrganizations(ctx context.Context, params FindOrganizationsParams) (fa1 []FindOrganizationsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindOrganizations")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindOrganizations(ctx, params)
}

// FindRepohookByID implements Querier
func (_d QuerierWithTracing) FindRepohookByID(ctx context.Context, repohookID pgtype.UUID) (f1 FindRepohookByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRepohookByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"repohookID": repohookID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRepohookByID(ctx, repohookID)
}

// FindRepohookByRepoAndProvider implements Querier
func (_d QuerierWithTracing) FindRepohookByRepoAndProvider(ctx context.Context, repoPath pgtype.Text, vcsProviderID pgtype.Text) (fa1 []FindRepohookByRepoAndProviderRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRepohookByRepoAndProvider")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"repoPath":      repoPath,
				"vcsProviderID": vcsProviderID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRepohookByRepoAndProvider(ctx, repoPath, vcsProviderID)
}

// FindRepohooks implements Querier
func (_d QuerierWithTracing) FindRepohooks(ctx context.Context) (fa1 []FindRepohooksRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRepohooks")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRepohooks(ctx)
}

// FindRunByID implements Querier
func (_d QuerierWithTracing) FindRunByID(ctx context.Context, runID pgtype.Text) (f1 FindRunByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRunByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRunByID(ctx, runID)
}

// FindRunByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindRunByIDForUpdate(ctx context.Context, runID pgtype.Text) (f1 FindRunByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRunByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRunByIDForUpdate(ctx, runID)
}

// FindRuns implements Querier
func (_d QuerierWithTracing) FindRuns(ctx context.Context, params FindRunsParams) (fa1 []FindRunsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindRuns")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindRuns(ctx, params)
}

// FindServerAgents implements Querier
func (_d QuerierWithTracing) FindServerAgents(ctx context.Context) (fa1 []FindServerAgentsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindServerAgents")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindServerAgents(ctx)
}

// FindStateVersionByID implements Querier
func (_d QuerierWithTracing) FindStateVersionByID(ctx context.Context, id pgtype.Text) (f1 FindStateVersionByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindStateVersionByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindStateVersionByID(ctx, id)
}

// FindStateVersionByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindStateVersionByIDForUpdate(ctx context.Context, id pgtype.Text) (f1 FindStateVersionByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindStateVersionByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindStateVersionByIDForUpdate(ctx, id)
}

// FindStateVersionOutputByID implements Querier
func (_d QuerierWithTracing) FindStateVersionOutputByID(ctx context.Context, id pgtype.Text) (f1 FindStateVersionOutputByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindStateVersionOutputByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindStateVersionOutputByID(ctx, id)
}

// FindStateVersionStateByID implements Querier
func (_d QuerierWithTracing) FindStateVersionStateByID(ctx context.Context, id pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindStateVersionStateByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindStateVersionStateByID(ctx, id)
}

// FindStateVersionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindStateVersionsByWorkspaceID(ctx context.Context, params FindStateVersionsByWorkspaceIDParams) (fa1 []FindStateVersionsByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindStateVersionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindStateVersionsByWorkspaceID(ctx, params)
}

// FindTagByID implements Querier
func (_d QuerierWithTracing) FindTagByID(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (f1 FindTagByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTagByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"tagID":            tagID,
				"organizationName": organizationName}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTagByID(ctx, tagID, organizationName)
}

// FindTagByName implements Querier
func (_d QuerierWithTracing) FindTagByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (f1 FindTagByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTagByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"name":             name,
				"organizationName": organizationName}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTagByName(ctx, name, organizationName)
}

// FindTags implements Querier
func (_d QuerierWithTracing) FindTags(ctx context.Context, params FindTagsParams) (fa1 []FindTagsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTags")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTags(ctx, params)
}

// FindTeamByID implements Querier
func (_d QuerierWithTracing) FindTeamByID(ctx context.Context, teamID pgtype.Text) (f1 FindTeamByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamByID(ctx, teamID)
}

// FindTeamByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindTeamByIDForUpdate(ctx context.Context, teamID pgtype.Text) (f1 FindTeamByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamByIDForUpdate(ctx, teamID)
}

// FindTeamByName implements Querier
func (_d QuerierWithTracing) FindTeamByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (f1 FindTeamByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"name":             name,
				"organizationName": organizationName}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamByName(ctx, name, organizationName)
}

// FindTeamByTokenID implements Querier
func (_d QuerierWithTracing) FindTeamByTokenID(ctx context.Context, tokenID pgtype.Text) (f1 FindTeamByTokenIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamByTokenID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamByTokenID(ctx, tokenID)
}

// FindTeamTokensByID implements Querier
func (_d QuerierWithTracing) FindTeamTokensByID(ctx context.Context, teamID pgtype.Text) (fa1 []FindTeamTokensByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamTokensByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamTokensByID(ctx, teamID)
}

// FindTeamsByOrg implements Querier
func (_d QuerierWithTracing) FindTeamsByOrg(ctx context.Context, organizationName pgtype.Text) (fa1 []FindTeamsByOrgRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTeamsByOrg")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTeamsByOrg(ctx, organizationName)
}

// FindTokenByID implements Querier
func (_d QuerierWithTracing) FindTokenByID(ctx context.Context, tokenID pgtype.Text) (f1 FindTokenByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTokenByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTokenByID(ctx, tokenID)
}

// FindTokensByUsername implements Querier
func (_d QuerierWithTracing) FindTokensByUsername(ctx context.Context, username pgtype.Text) (fa1 []FindTokensByUsernameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindTokensByUsername")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"username": username}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindTokensByUsername(ctx, username)
}

// FindUnreferencedRepohooks implements Querier
func (_d QuerierWithTracing) FindUnreferencedRepohooks(ctx context.Context) (fa1 []FindUnreferencedRepohooksRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUnreferencedRepohooks")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUnreferencedRepohooks(ctx)
}

// FindUserByAuthenticationTokenID implements Querier
func (_d QuerierWithTracing) FindUserByAuthenticationTokenID(ctx context.Context, tokenID pgtype.Text) (f1 FindUserByAuthenticationTokenIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUserByAuthenticationTokenID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tokenID": tokenID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUserByAuthenticationTokenID(ctx, tokenID)
}

// FindUserByID implements Querier
func (_d QuerierWithTracing) FindUserByID(ctx context.Context, userID pgtype.Text) (f1 FindUserByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUserByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"userID": userID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUserByID(ctx, userID)
}

// FindUserByUsername implements Querier
func (_d QuerierWithTracing) FindUserByUsername(ctx context.Context, username pgtype.Text) (f1 FindUserByUsernameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUserByUsername")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"username": username}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUserByUsername(ctx, username)
}

// FindUsers implements Querier
func (_d QuerierWithTracing) FindUsers(ctx context.Context) (fa1 []FindUsersRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUsers")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUsers(ctx)
}

// FindUsersByOrganization implements Querier
func (_d QuerierWithTracing) FindUsersByOrganization(ctx context.Context, organizationName pgtype.Text) (fa1 []FindUsersByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUsersByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUsersByOrganization(ctx, organizationName)
}

// FindUsersByTeamID implements Querier
func (_d QuerierWithTracing) FindUsersByTeamID(ctx context.Context, teamID pgtype.Text) (fa1 []FindUsersByTeamIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindUsersByTeamID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"teamID": teamID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindUsersByTeamID(ctx, teamID)
}

// FindVCSProvider implements Querier
func (_d QuerierWithTracing) FindVCSProvider(ctx context.Context, vcsProviderID pgtype.Text) (f1 FindVCSProviderRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVCSProvider")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"vcsProviderID": vcsProviderID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVCSProvider(ctx, vcsProviderID)
}

// FindVCSProviderForUpdate implements Querier
func (_d QuerierWithTracing) FindVCSProviderForUpdate(ctx context.Context, vcsProviderID pgtype.Text) (f1 FindVCSProviderForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVCSProviderForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"vcsProviderID": vcsProviderID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVCSProviderForUpdate(ctx, vcsProviderID)
}

// FindVCSProviders implements Querier
func (_d QuerierWithTracing) FindVCSProviders(ctx context.Context) (fa1 []FindVCSProvidersRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVCSProviders")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVCSProviders(ctx)
}

// FindVCSProvidersByGithubAppInstallID implements Querier
func (_d QuerierWithTracing) FindVCSProvidersByGithubAppInstallID(ctx context.Context, installID pgtype.Int8) (fa1 []FindVCSProvidersByGithubAppInstallIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVCSProvidersByGithubAppInstallID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"installID": installID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVCSProvidersByGithubAppInstallID(ctx, installID)
}

// FindVCSProvidersByOrganization implements Querier
func (_d QuerierWithTracing) FindVCSProvidersByOrganization(ctx context.Context, organizationName pgtype.Text) (fa1 []FindVCSProvidersByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVCSProvidersByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVCSProvidersByOrganization(ctx, organizationName)
}

// FindVariable implements Querier
func (_d QuerierWithTracing) FindVariable(ctx context.Context, variableID pgtype.Text) (f1 FindVariableRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"variableID": variableID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariable(ctx, variableID)
}

// FindVariableSetBySetID implements Querier
func (_d QuerierWithTracing) FindVariableSetBySetID(ctx context.Context, variableSetID pgtype.Text) (f1 FindVariableSetBySetIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariableSetBySetID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariableSetBySetID(ctx, variableSetID)
}

// FindVariableSetByVariableID implements Querier
func (_d QuerierWithTracing) FindVariableSetByVariableID(ctx context.Context, variableID pgtype.Text) (f1 FindVariableSetByVariableIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariableSetByVariableID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"variableID": variableID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariableSetByVariableID(ctx, variableID)
}

// FindVariableSetForUpdate implements Querier
func (_d QuerierWithTracing) FindVariableSetForUpdate(ctx context.Context, variableSetID pgtype.Text) (f1 FindVariableSetForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariableSetForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariableSetForUpdate(ctx, variableSetID)
}

// FindVariableSetsByOrganization implements Querier
func (_d QuerierWithTracing) FindVariableSetsByOrganization(ctx context.Context, organizationName pgtype.Text) (fa1 []FindVariableSetsByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariableSetsByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariableSetsByOrganization(ctx, organizationName)
}

// FindVariableSetsByWorkspace implements Querier
func (_d QuerierWithTracing) FindVariableSetsByWorkspace(ctx context.Context, workspaceID pgtype.Text) (fa1 []FindVariableSetsByWorkspaceRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindVariableSetsByWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindVariableSetsByWorkspace(ctx, workspaceID)
}

// FindWorkspaceByID implements Querier
func (_d QuerierWithTracing) FindWorkspaceByID(ctx context.Context, id pgtype.Text) (f1 FindWorkspaceByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceByID(ctx, id)
}

// FindWorkspaceByIDForUpdate implements Querier
func (_d QuerierWithTracing) FindWorkspaceByIDForUpdate(ctx context.Context, id pgtype.Text) (f1 FindWorkspaceByIDForUpdateRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceByIDForUpdate")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceByIDForUpdate(ctx, id)
}

// FindWorkspaceByName implements Querier
func (_d QuerierWithTracing) FindWorkspaceByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (f1 FindWorkspaceByNameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"name":             name,
				"organizationName": organizationName}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceByName(ctx, name, organizationName)
}

// FindWorkspacePermissionsByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (fa1 []FindWorkspacePermissionsByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspacePermissionsByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspacePermissionsByWorkspaceID(ctx, workspaceID)
}

// FindWorkspaceTags implements Querier
func (_d QuerierWithTracing) FindWorkspaceTags(ctx context.Context, params FindWorkspaceTagsParams) (fa1 []FindWorkspaceTagsRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceTags")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceTags(ctx, params)
}

// FindWorkspaceVariableByVariableID implements Querier
func (_d QuerierWithTracing) FindWorkspaceVariableByVariableID(ctx context.Context, variableID pgtype.Text) (f1 FindWorkspaceVariableByVariableIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceVariableByVariableID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"variableID": variableID}, map[string]interface{}{
				"f1":  f1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceVariableByVariableID(ctx, variableID)
}

// FindWorkspaceVariablesByWorkspaceID implements Querier
func (_d QuerierWithTracing) FindWorkspaceVariablesByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (fa1 []FindWorkspaceVariablesByWorkspaceIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaceVariablesByWorkspaceID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaceVariablesByWorkspaceID(ctx, workspaceID)
}

// FindWorkspaces implements Querier
func (_d QuerierWithTracing) FindWorkspaces(ctx context.Context, params FindWorkspacesParams) (fa1 []FindWorkspacesRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspaces")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspaces(ctx, params)
}

// FindWorkspacesByConnection implements Querier
func (_d QuerierWithTracing) FindWorkspacesByConnection(ctx context.Context, vcsProviderID pgtype.Text, repoPath pgtype.Text) (fa1 []FindWorkspacesByConnectionRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspacesByConnection")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"vcsProviderID": vcsProviderID,
				"repoPath":      repoPath}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspacesByConnection(ctx, vcsProviderID, repoPath)
}

// FindWorkspacesByUsername implements Querier
func (_d QuerierWithTracing) FindWorkspacesByUsername(ctx context.Context, params FindWorkspacesByUsernameParams) (fa1 []FindWorkspacesByUsernameRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.FindWorkspacesByUsername")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"fa1": fa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.FindWorkspacesByUsername(ctx, params)
}

// GetGPGKey implements Querier
func (_d QuerierWithTracing) GetGPGKey(ctx context.Context, keyID pgtype.Text, organizationName pgtype.Text) (g1 GetGPGKeyRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.GetGPGKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"keyID":            keyID,
				"organizationName": organizationName}, map[string]interface{}{
				"g1":  g1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.GetGPGKey(ctx, keyID, organizationName)
}

// GetLockFileByID implements Querier
func (_d QuerierWithTracing) GetLockFileByID(ctx context.Context, runID pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.GetLockFileByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.GetLockFileByID(ctx, runID)
}

// GetPlanBinByID implements Querier
func (_d QuerierWithTracing) GetPlanBinByID(ctx context.Context, runID pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.GetPlanBinByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.GetPlanBinByID(ctx, runID)
}

// GetPlanJSONByID implements Querier
func (_d QuerierWithTracing) GetPlanJSONByID(ctx context.Context, runID pgtype.Text) (ba1 []byte, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.GetPlanJSONByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"runID": runID}, map[string]interface{}{
				"ba1": ba1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.GetPlanJSONByID(ctx, runID)
}

// InsertAgent implements Querier
func (_d QuerierWithTracing) InsertAgent(ctx context.Context, params InsertAgentParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertAgent")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertAgent(ctx, params)
}

// InsertAgentPool implements Querier
func (_d QuerierWithTracing) InsertAgentPool(ctx context.Context, params InsertAgentPoolParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertAgentPool(ctx, params)
}

// InsertAgentPoolAllowedWorkspace implements Querier
func (_d QuerierWithTracing) InsertAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertAgentPoolAllowedWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"poolID":      poolID,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertAgentPoolAllowedWorkspace(ctx, poolID, workspaceID)
}

// InsertAgentToken implements Querier
func (_d QuerierWithTracing) InsertAgentToken(ctx context.Context, params InsertAgentTokenParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertAgentToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertAgentToken(ctx, params)
}

// InsertApply implements Querier
func (_d QuerierWithTracing) InsertApply(ctx context.Context, runID pgtype.Text, status pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertApply")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"runID":  runID,
				"status": status}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertApply(ctx, runID, status)
}

// InsertConfigurationVersion implements Querier
func (_d QuerierWithTracing) InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertConfigurationVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertConfigurationVersion(ctx, params)
}

// InsertConfigurationVersionStatusTimestamp implements Querier
func (_d QuerierWithTracing) InsertConfigurationVersionStatusTimestamp(ctx context.Context, params InsertConfigurationVersionStatusTimestampParams) (i1 InsertConfigurationVersionStatusTimestampRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertConfigurationVersionStatusTimestamp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertConfigurationVersionStatusTimestamp(ctx, params)
}

// InsertGPGKey implements Querier
func (_d QuerierWithTracing) InsertGPGKey(ctx context.Context, params InsertGPGKeyParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertGPGKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertGPGKey(ctx, params)
}

// InsertGithubApp implements Querier
func (_d QuerierWithTracing) InsertGithubApp(ctx context.Context, params InsertGithubAppParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertGithubApp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertGithubApp(ctx, params)
}

// InsertGithubAppInstall implements Querier
func (_d QuerierWithTracing) InsertGithubAppInstall(ctx context.Context, params InsertGithubAppInstallParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertGithubAppInstall")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertGithubAppInstall(ctx, params)
}

// InsertIngressAttributes implements Querier
func (_d QuerierWithTracing) InsertIngressAttributes(ctx context.Context, params InsertIngressAttributesParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertIngressAttributes")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertIngressAttributes(ctx, params)
}

// InsertJob implements Querier
func (_d QuerierWithTracing) InsertJob(ctx context.Context, params InsertJobParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertJob")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertJob(ctx, params)
}

// InsertLatestTerraformVersion implements Querier
func (_d QuerierWithTracing) InsertLatestTerraformVersion(ctx context.Context, version pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertLatestTerraformVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"version": version}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertLatestTerraformVersion(ctx, version)
}

// InsertLogChunk implements Querier
func (_d QuerierWithTracing) InsertLogChunk(ctx context.Context, params InsertLogChunkParams) (i1 pgtype.Int4, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertLogChunk")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertLogChunk(ctx, params)
}

// InsertModule implements Querier
func (_d QuerierWithTracing) InsertModule(ctx context.Context, params InsertModuleParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertModule")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertModule(ctx, params)
}

// InsertModuleTarball implements Querier
func (_d QuerierWithTracing) InsertModuleTarball(ctx context.Context, tarball []byte, moduleVersionID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertModuleTarball")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"tarball":         tarball,
				"moduleVersionID": moduleVersionID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertModuleTarball(ctx, tarball, moduleVersionID)
}

// InsertModuleVersion implements Querier
func (_d QuerierWithTracing) InsertModuleVersion(ctx context.Context, params InsertModuleVersionParams) (i1 InsertModuleVersionRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertModuleVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertModuleVersion(ctx, params)
}

// InsertNotificationConfiguration implements Querier
func (_d QuerierWithTracing) InsertNotificationConfiguration(ctx context.Context, params InsertNotificationConfigurationParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertNotificationConfiguration")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertNotificationConfiguration(ctx, params)
}

// InsertOrganization implements Querier
func (_d QuerierWithTracing) InsertOrganization(ctx context.Context, params InsertOrganizationParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertOrganization(ctx, params)
}

// InsertPhaseStatusTimestamp implements Querier
func (_d QuerierWithTracing) InsertPhaseStatusTimestamp(ctx context.Context, params InsertPhaseStatusTimestampParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertPhaseStatusTimestamp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertPhaseStatusTimestamp(ctx, params)
}

// InsertPlan implements Querier
func (_d QuerierWithTracing) InsertPlan(ctx context.Context, runID pgtype.Text, status pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertPlan")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"runID":  runID,
				"status": status}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertPlan(ctx, runID, status)
}

// InsertRepoConnection implements Querier
func (_d QuerierWithTracing) InsertRepoConnection(ctx context.Context, params InsertRepoConnectionParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertRepoConnection")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertRepoConnection(ctx, params)
}

// InsertRepohook implements Querier
func (_d QuerierWithTracing) InsertRepohook(ctx context.Context, params InsertRepohookParams) (i1 InsertRepohookRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertRepohook")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"i1":  i1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertRepohook(ctx, params)
}

// InsertRun implements Querier
func (_d QuerierWithTracing) InsertRun(ctx context.Context, params InsertRunParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertRun")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertRun(ctx, params)
}

// InsertRunStatusTimestamp implements Querier
func (_d QuerierWithTracing) InsertRunStatusTimestamp(ctx context.Context, params InsertRunStatusTimestampParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertRunStatusTimestamp")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertRunStatusTimestamp(ctx, params)
}

// InsertRunVariable implements Querier
func (_d QuerierWithTracing) InsertRunVariable(ctx context.Context, params InsertRunVariableParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertRunVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertRunVariable(ctx, params)
}

// InsertStateVersion implements Querier
func (_d QuerierWithTracing) InsertStateVersion(ctx context.Context, params InsertStateVersionParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertStateVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertStateVersion(ctx, params)
}

// InsertStateVersionOutput implements Querier
func (_d QuerierWithTracing) InsertStateVersionOutput(ctx context.Context, params InsertStateVersionOutputParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertStateVersionOutput")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertStateVersionOutput(ctx, params)
}

// InsertTag implements Querier
func (_d QuerierWithTracing) InsertTag(ctx context.Context, params InsertTagParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertTag")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertTag(ctx, params)
}

// InsertTeam implements Querier
func (_d QuerierWithTracing) InsertTeam(ctx context.Context, params InsertTeamParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertTeam")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertTeam(ctx, params)
}

// InsertTeamMembership implements Querier
func (_d QuerierWithTracing) InsertTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) (ta1 []pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertTeamMembership")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"usernames": usernames,
				"teamID":    teamID}, map[string]interface{}{
				"ta1": ta1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertTeamMembership(ctx, usernames, teamID)
}

// InsertTeamToken implements Querier
func (_d QuerierWithTracing) InsertTeamToken(ctx context.Context, params InsertTeamTokenParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertTeamToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertTeamToken(ctx, params)
}

// InsertToken implements Querier
func (_d QuerierWithTracing) InsertToken(ctx context.Context, params InsertTokenParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertToken(ctx, params)
}

// InsertUser implements Querier
func (_d QuerierWithTracing) InsertUser(ctx context.Context, params InsertUserParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertUser")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertUser(ctx, params)
}

// InsertVCSProvider implements Querier
func (_d QuerierWithTracing) InsertVCSProvider(ctx context.Context, params InsertVCSProviderParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertVCSProvider")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertVCSProvider(ctx, params)
}

// InsertVariable implements Querier
func (_d QuerierWithTracing) InsertVariable(ctx context.Context, params InsertVariableParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertVariable(ctx, params)
}

// InsertVariableSet implements Querier
func (_d QuerierWithTracing) InsertVariableSet(ctx context.Context, params InsertVariableSetParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertVariableSet")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertVariableSet(ctx, params)
}

// InsertVariableSetVariable implements Querier
func (_d QuerierWithTracing) InsertVariableSetVariable(ctx context.Context, variableSetID pgtype.Text, variableID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertVariableSetVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID,
				"variableID":    variableID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertVariableSetVariable(ctx, variableSetID, variableID)
}

// InsertVariableSetWorkspace implements Querier
func (_d QuerierWithTracing) InsertVariableSetWorkspace(ctx context.Context, variableSetID pgtype.Text, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertVariableSetWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":           ctx,
				"variableSetID": variableSetID,
				"workspaceID":   workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertVariableSetWorkspace(ctx, variableSetID, workspaceID)
}

// InsertWorkspace implements Querier
func (_d QuerierWithTracing) InsertWorkspace(ctx context.Context, params InsertWorkspaceParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertWorkspace")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertWorkspace(ctx, params)
}

// InsertWorkspaceTag implements Querier
func (_d QuerierWithTracing) InsertWorkspaceTag(ctx context.Context, tagID pgtype.Text, workspaceID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertWorkspaceTag")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"tagID":       tagID,
				"workspaceID": workspaceID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertWorkspaceTag(ctx, tagID, workspaceID)
}

// InsertWorkspaceTagByName implements Querier
func (_d QuerierWithTracing) InsertWorkspaceTagByName(ctx context.Context, workspaceID pgtype.Text, tagName pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertWorkspaceTagByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"workspaceID": workspaceID,
				"tagName":     tagName}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertWorkspaceTagByName(ctx, workspaceID, tagName)
}

// InsertWorkspaceVariable implements Querier
func (_d QuerierWithTracing) InsertWorkspaceVariable(ctx context.Context, variableID pgtype.Text, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.InsertWorkspaceVariable")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"variableID":  variableID,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.InsertWorkspaceVariable(ctx, variableID, workspaceID)
}

// ListGPGKeys implements Querier
func (_d QuerierWithTracing) ListGPGKeys(ctx context.Context, organizationNames []string) (la1 []ListGPGKeysRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.ListGPGKeys")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":               ctx,
				"organizationNames": organizationNames}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.ListGPGKeys(ctx, organizationNames)
}

// ListModulesByOrganization implements Querier
func (_d QuerierWithTracing) ListModulesByOrganization(ctx context.Context, organizationName pgtype.Text) (la1 []ListModulesByOrganizationRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.ListModulesByOrganization")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"organizationName": organizationName}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.ListModulesByOrganization(ctx, organizationName)
}

// PutLockFile implements Querier
func (_d QuerierWithTracing) PutLockFile(ctx context.Context, lockFile []byte, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.PutLockFile")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"lockFile": lockFile,
				"runID":    runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.PutLockFile(ctx, lockFile, runID)
}

// ResetUserSiteAdmins implements Querier
func (_d QuerierWithTracing) ResetUserSiteAdmins(ctx context.Context) (ta1 []pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.ResetUserSiteAdmins")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ta1": ta1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.ResetUserSiteAdmins(ctx)
}

// UpdateAgent implements Querier
func (_d QuerierWithTracing) UpdateAgent(ctx context.Context, params UpdateAgentParams) (u1 UpdateAgentRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateAgent")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateAgent(ctx, params)
}

// UpdateAgentPool implements Querier
func (_d QuerierWithTracing) UpdateAgentPool(ctx context.Context, params UpdateAgentPoolParams) (u1 UpdateAgentPoolRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateAgentPool")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateAgentPool(ctx, params)
}

// UpdateAppliedChangesByID implements Querier
func (_d QuerierWithTracing) UpdateAppliedChangesByID(ctx context.Context, params UpdateAppliedChangesByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateAppliedChangesByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateAppliedChangesByID(ctx, params)
}

// UpdateApplyStatusByID implements Querier
func (_d QuerierWithTracing) UpdateApplyStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateApplyStatusByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"status": status,
				"runID":  runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateApplyStatusByID(ctx, status, runID)
}

// UpdateCancelSignaledAt implements Querier
func (_d QuerierWithTracing) UpdateCancelSignaledAt(ctx context.Context, cancelSignaledAt pgtype.Timestamptz, id pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateCancelSignaledAt")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":              ctx,
				"cancelSignaledAt": cancelSignaledAt,
				"id":               id}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateCancelSignaledAt(ctx, cancelSignaledAt, id)
}

// UpdateConfigurationVersionConfigByID implements Querier
func (_d QuerierWithTracing) UpdateConfigurationVersionConfigByID(ctx context.Context, config []byte, id pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateConfigurationVersionConfigByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"config": config,
				"id":     id}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateConfigurationVersionConfigByID(ctx, config, id)
}

// UpdateConfigurationVersionErroredByID implements Querier
func (_d QuerierWithTracing) UpdateConfigurationVersionErroredByID(ctx context.Context, id pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateConfigurationVersionErroredByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateConfigurationVersionErroredByID(ctx, id)
}

// UpdateGPGKey implements Querier
func (_d QuerierWithTracing) UpdateGPGKey(ctx context.Context, params UpdateGPGKeyParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateGPGKey")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateGPGKey(ctx, params)
}

// UpdateJob implements Querier
func (_d QuerierWithTracing) UpdateJob(ctx context.Context, params UpdateJobParams) (u1 UpdateJobRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateJob")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateJob(ctx, params)
}

// UpdateLatestTerraformVersion implements Querier
func (_d QuerierWithTracing) UpdateLatestTerraformVersion(ctx context.Context, version pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateLatestTerraformVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"version": version}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateLatestTerraformVersion(ctx, version)
}

// UpdateModuleStatusByID implements Querier
func (_d QuerierWithTracing) UpdateModuleStatusByID(ctx context.Context, status pgtype.Text, moduleID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateModuleStatusByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"status":   status,
				"moduleID": moduleID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateModuleStatusByID(ctx, status, moduleID)
}

// UpdateModuleVersionStatusByID implements Querier
func (_d QuerierWithTracing) UpdateModuleVersionStatusByID(ctx context.Context, params UpdateModuleVersionStatusByIDParams) (u1 UpdateModuleVersionStatusByIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateModuleVersionStatusByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateModuleVersionStatusByID(ctx, params)
}

// UpdateNotificationConfigurationByID implements Querier
func (_d QuerierWithTracing) UpdateNotificationConfigurationByID(ctx context.Context, params UpdateNotificationConfigurationByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateNotificationConfigurationByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateNotificationConfigurationByID(ctx, params)
}

// UpdateOrganizationByName implements Querier
func (_d QuerierWithTracing) UpdateOrganizationByName(ctx context.Context, params UpdateOrganizationByNameParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateOrganizationByName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateOrganizationByName(ctx, params)
}

// UpdatePlanBinByID implements Querier
func (_d QuerierWithTracing) UpdatePlanBinByID(ctx context.Context, planBin []byte, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdatePlanBinByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"planBin": planBin,
				"runID":   runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdatePlanBinByID(ctx, planBin, runID)
}

// UpdatePlanJSONByID implements Querier
func (_d QuerierWithTracing) UpdatePlanJSONByID(ctx context.Context, planJSON []byte, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdatePlanJSONByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"planJSON": planJSON,
				"runID":    runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdatePlanJSONByID(ctx, planJSON, runID)
}

// UpdatePlanStatusByID implements Querier
func (_d QuerierWithTracing) UpdatePlanStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdatePlanStatusByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"status": status,
				"runID":  runID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdatePlanStatusByID(ctx, status, runID)
}

// UpdatePlannedChangesByID implements Querier
func (_d QuerierWithTracing) UpdatePlannedChangesByID(ctx context.Context, params UpdatePlannedChangesByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdatePlannedChangesByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdatePlannedChangesByID(ctx, params)
}

// UpdateRepohookVCSID implements Querier
func (_d QuerierWithTracing) UpdateRepohookVCSID(ctx context.Context, vcsID pgtype.Text, repohookID pgtype.UUID) (u1 UpdateRepohookVCSIDRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateRepohookVCSID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"vcsID":      vcsID,
				"repohookID": repohookID}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateRepohookVCSID(ctx, vcsID, repohookID)
}

// UpdateRunStatus implements Querier
func (_d QuerierWithTracing) UpdateRunStatus(ctx context.Context, status pgtype.Text, id pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateRunStatus")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"status": status,
				"id":     id}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateRunStatus(ctx, status, id)
}

// UpdateState implements Querier
func (_d QuerierWithTracing) UpdateState(ctx context.Context, state []byte, stateVersionID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateState")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":            ctx,
				"state":          state,
				"stateVersionID": stateVersionID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateState(ctx, state, stateVersionID)
}

// UpdateTeamByID implements Querier
func (_d QuerierWithTracing) UpdateTeamByID(ctx context.Context, params UpdateTeamByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateTeamByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateTeamByID(ctx, params)
}

// UpdateUserSiteAdmins implements Querier
func (_d QuerierWithTracing) UpdateUserSiteAdmins(ctx context.Context, usernames []string) (ta1 []pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateUserSiteAdmins")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"usernames": usernames}, map[string]interface{}{
				"ta1": ta1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateUserSiteAdmins(ctx, usernames)
}

// UpdateVCSProvider implements Querier
func (_d QuerierWithTracing) UpdateVCSProvider(ctx context.Context, params UpdateVCSProviderParams) (u1 UpdateVCSProviderRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateVCSProvider")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateVCSProvider(ctx, params)
}

// UpdateVariableByID implements Querier
func (_d QuerierWithTracing) UpdateVariableByID(ctx context.Context, params UpdateVariableByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateVariableByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateVariableByID(ctx, params)
}

// UpdateVariableSetByID implements Querier
func (_d QuerierWithTracing) UpdateVariableSetByID(ctx context.Context, params UpdateVariableSetByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateVariableSetByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateVariableSetByID(ctx, params)
}

// UpdateWorkspaceByID implements Querier
func (_d QuerierWithTracing) UpdateWorkspaceByID(ctx context.Context, params UpdateWorkspaceByIDParams) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateWorkspaceByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateWorkspaceByID(ctx, params)
}

// UpdateWorkspaceCurrentStateVersionID implements Querier
func (_d QuerierWithTracing) UpdateWorkspaceCurrentStateVersionID(ctx context.Context, stateVersionID pgtype.Text, workspaceID pgtype.Text) (t1 pgtype.Text, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateWorkspaceCurrentStateVersionID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":            ctx,
				"stateVersionID": stateVersionID,
				"workspaceID":    workspaceID}, map[string]interface{}{
				"t1":  t1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateWorkspaceCurrentStateVersionID(ctx, stateVersionID, workspaceID)
}

// UpdateWorkspaceLatestRun implements Querier
func (_d QuerierWithTracing) UpdateWorkspaceLatestRun(ctx context.Context, runID pgtype.Text, workspaceID pgtype.Text) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateWorkspaceLatestRun")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"runID":       runID,
				"workspaceID": workspaceID}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateWorkspaceLatestRun(ctx, runID, workspaceID)
}

// UpdateWorkspaceLockByID implements Querier
func (_d QuerierWithTracing) UpdateWorkspaceLockByID(ctx context.Context, params UpdateWorkspaceLockByIDParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpdateWorkspaceLockByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpdateWorkspaceLockByID(ctx, params)
}

// UpsertOrganizationToken implements Querier
func (_d QuerierWithTracing) UpsertOrganizationToken(ctx context.Context, params UpsertOrganizationTokenParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpsertOrganizationToken")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpsertOrganizationToken(ctx, params)
}

// UpsertWorkspacePermission implements Querier
func (_d QuerierWithTracing) UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (c2 pgconn.CommandTag, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Querier.UpsertWorkspacePermission")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"c2":  c2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Querier.UpsertWorkspacePermission(ctx, params)
}
